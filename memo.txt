기계어를 인간이 다기억하고 사용하기 어려워서 기계어를 인간이 알아볼 수 있는
프밍 언어가 필요했다.
이래서 탄생한 것이
니모닉 기호 + 기계어 -> 어셈블리어
니모닉 기호란 무엇인가를 연상하여 기억하기 위해 만든 짧은 코드.
그러나 어셈블리어는 CPU가 이해를 못하기에 기계어로 변환을 다시 해야하는데 이 작업을 수행하는
프로그램을 어셈블러 라 한다.

고급과 저급은 프로그래밍 언어에서 질의 수준으로 나뉜것이 아닌 인간이 사용하기 편한 자연어와의
가까움에 나뉜다.

고급 프로그래밍 언어로 작성한 코드 -> 저급 프로그래밍 언어로 번역하는 방식은 크게
- 컴파일러
- 인터프리터
방식이 존재한다.

컴파일러는 특정 프밍 언어로 작성된 소스 코드를 다른 프밍 언어로 변환하는 프로그램이다.
주로 원시 소스 코드(본 작성 코드)를 어셈블리어나, 기계어로 변환한다.
컴파일러는 목적 프로그램을 만들고, 이 목적 프로그램을 실행하는 명령을 지시함으로써 실제
프로그램을 완성한다.

이에 반해 인터프리터는 소스 프로그램을 컴파일하여 목적 프로그램을 생성하지 않고,
라인 단위로 해석하면서 바로 실행한다.

인터프리터의 방식은 소스 텍스트를 만날 경우
1. 어휘 분석(토큰 추출),
2. 내부 코드 생성(코드 기호화),
3. 구문 분석 실행
이 3단계이다.

